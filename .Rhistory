# Load data
name = 'NB_B_1.3'
load("C:\\Users\\lucp9827\\Desktop\\Data-ADAM\\NB simulated data\\NB_B_1.3.RData")
### Apply methods to data
res_intermediate=list()
result_aldex = data.frame()
result_corncob= data.frame()
result_ancombc = data.frame()
result_wilcox = data.frame()
result_wilcox_clr = data.frame()
result_marg = data.frame()
result_RI = data.frame()
result_LinDA = data.frame()
result_deseq2 = data.frame()
for (i in (1:100)){
data = signtrans::Trim(sim.data.bulk.p_B[[i]],minPrev = 0.05)
# Apply test
res = apply_methods_stat(data)
res_intermediate[[i]] = res
# Evaluate Test
counts_trim = data.frame(otu_table(data))
# Identify index of I0/I1 OTus
I0_id = which(tax_table(data)[,1] == "FALSE")
I1_id = which(tax_table(data)[,1] == "TRUE")
res_aldex = res_intermediate[[i]][['res_aldex2_w']]
if (!is.null(res_aldex)){
result_aldex[i,c(1:3)] = eval_sums(res_aldex$adjP,I0_id,I1_id)
}
res_corncob = res_intermediate[[i]][['res_corncob']]
if (!is.null(res_corncob)){
result_corncob[i,c(1:3)] =eval_sums(res_corncob$adjP,I0_id,I1_id)
}
res_ancombc = res_intermediate[[i]][['res_ancombc']]
if (!is.null(res_ancombc)){
result_ancombc[i,c(1:3)] =eval_sums(res_ancombc$adjP,I0_id,I1_id)
}
res_wilcox = res_intermediate[[i]][["res_wilcox"]]
if (!is.null(res_wilcox)){
result_wilcox[i,c(1:3)]=eval_sums(res_wilcox$adjP,I0_id,I1_id)
}
res_wilcox_clr = res_intermediate[[i]][["res_wilcox_clr"]]
if (!is.null(res_wilcox_clr)){
result_wilcox_clr[i,c(1:3)]=eval_sums(res_wilcox_clr$adjP,I0_id,I1_id)
}
res_linda= res_intermediate[[i]][["res_linda"]]
if (!is.null(res_linda)){
result_LinDA[i,c(1:3)]=eval_sums(res_linda$adjP,I0_id,I1_id)
}
res_deseq= res_intermediate[[i]][["res_deseq"]]
if (!is.null(res_deseq)){
result_deseq2[i,c(1:3)]=eval_sums(res_deseq$adjP,I0_id,I1_id)
}
# Refrence taxa worden uitgekozen dus evaluatie moet ook aangepast worden!
res_marg = res_intermediate[[i]][["res_marginal"]]
names_I0 = rownames(counts_trim[I0_id,])
names_I1 = rownames(counts_trim[I1_id,])
I0_id_adj =which(rownames(res_marg) %in% names_I0)
I1_id_adj =which(rownames(res_marg) %in% names_I1)
if (!is.null(res_marg)){
result_marg[i,c(1:3)]=eval_sums(res_marg$adjP,I0_id_adj,I1_id_adj)
}
res_RI = res_intermediate[[i]][["res_RI"]]
if (!is.null(res_RI)){
result_RI[i,c(1:3)]=eval_sums(res_RI$adjP,I0_id_adj,I1_id_adj)
}
}
save(res_intermediate, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\inter_",name,".RData"))
Methods = c("Aldex2", "Corncob", "ANCOM-bc", "Wilcoxon", "Wilcoxon_clr","R-sign_marg","R-sign_RI","LinDA","DESeq2")
res_all = data.frame
res_all = rbind(
colMeans(result_aldex,na.rm=TRUE),
colMeans(result_corncob,na.rm=TRUE),
colMeans(result_ancombc,na.rm=TRUE),
colMeans(result_wilcox,na.rm=TRUE),
colMeans(result_wilcox_clr,na.rm=TRUE),
colMeans(result_marg,na.rm=TRUE),
colMeans(result_RI,na.rm=TRUE),
colMeans(result_LinDA,na.rm=TRUE),
colMeans(result_deseq2,na.rm=TRUE)
)
res_all=data.frame(res_all)
res_all$Method = Methods
save(res_all, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\res_",name,".RData"))
res_all_tmp = list()
res_al_tmp = list(
(result_aldex),
(result_corncob),
(result_ancombc),
(result_wilcox),
(result_wilcox_clr),
(result_marg),
(result_RI),
(result_LinDA),
(result_deseq2)
)
names(res_al_tmp) = Methods
save(res_all_tmp, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\res_dataset_",name,".RData"))
res_all=data.frame(res_all)
res_all$Method = Methods
save(res_all, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\res_",name,".RData"))
res_all_tmp = list()
res_al_tmp = list(
(result_aldex),
(result_corncob),
(result_ancombc),
(result_wilcox),
(result_wilcox_clr),
(result_marg),
(result_RI),
(result_LinDA),
(result_deseq2)
)
names(res_al_tmp) = Methods
save(res_all_tmp, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\res_dataset_",name,".RData"))
res_all
source("C:\\Users\\lucp9827\\Desktop\\Code-ADAM\\Functions_clr_tresh_samp_ancom.R")
# Load packages
library(phyloseq)
# Load data
name = 'NB_A_1.1'
load("C:\\Users\\lucp9827\\Desktop\\Data-ADAM\\NB simulated data\\NB_A_1.1.RData")
### Apply methods to data
res_intermediate=list()
result_aldex = data.frame()
result_corncob= data.frame()
result_ancombc = data.frame()
result_wilcox = data.frame()
result_wilcox_clr = data.frame()
result_marg = data.frame()
result_RI = data.frame()
result_LinDA = data.frame()
result_deseq2 = data.frame()
for (i in (1:100)){
data = signtrans::Trim(sim.data.bulk.p_B[[i]],minPrev = 0.05)
# Apply test
res = apply_methods_stat(data)
res_intermediate[[i]] = res
# Evaluate Test
counts_trim = data.frame(otu_table(data))
# Identify index of I0/I1 OTus
I0_id = which(tax_table(data)[,1] == "FALSE")
I1_id = which(tax_table(data)[,1] == "TRUE")
res_aldex = res_intermediate[[i]][['res_aldex2_w']]
if (!is.null(res_aldex)){
result_aldex[i,c(1:3)] = eval_sums(res_aldex$adjP,I0_id,I1_id)
}
res_corncob = res_intermediate[[i]][['res_corncob']]
if (!is.null(res_corncob)){
result_corncob[i,c(1:3)] =eval_sums(res_corncob$adjP,I0_id,I1_id)
}
res_ancombc = res_intermediate[[i]][['res_ancombc']]
if (!is.null(res_ancombc)){
result_ancombc[i,c(1:3)] =eval_sums(res_ancombc$adjP,I0_id,I1_id)
}
res_wilcox = res_intermediate[[i]][["res_wilcox"]]
if (!is.null(res_wilcox)){
result_wilcox[i,c(1:3)]=eval_sums(res_wilcox$adjP,I0_id,I1_id)
}
res_wilcox_clr = res_intermediate[[i]][["res_wilcox_clr"]]
if (!is.null(res_wilcox_clr)){
result_wilcox_clr[i,c(1:3)]=eval_sums(res_wilcox_clr$adjP,I0_id,I1_id)
}
res_linda= res_intermediate[[i]][["res_linda"]]
if (!is.null(res_linda)){
result_LinDA[i,c(1:3)]=eval_sums(res_linda$adjP,I0_id,I1_id)
}
res_deseq= res_intermediate[[i]][["res_deseq"]]
if (!is.null(res_deseq)){
result_deseq2[i,c(1:3)]=eval_sums(res_deseq$adjP,I0_id,I1_id)
}
# Refrence taxa worden uitgekozen dus evaluatie moet ook aangepast worden!
res_marg = res_intermediate[[i]][["res_marginal"]]
names_I0 = rownames(counts_trim[I0_id,])
names_I1 = rownames(counts_trim[I1_id,])
I0_id_adj =which(rownames(res_marg) %in% names_I0)
I1_id_adj =which(rownames(res_marg) %in% names_I1)
if (!is.null(res_marg)){
result_marg[i,c(1:3)]=eval_sums(res_marg$adjP,I0_id_adj,I1_id_adj)
}
res_RI = res_intermediate[[i]][["res_RI"]]
if (!is.null(res_RI)){
result_RI[i,c(1:3)]=eval_sums(res_RI$adjP,I0_id_adj,I1_id_adj)
}
}
source("C:\\Users\\lucp9827\\Desktop\\Code-ADAM\\Functions_clr_tresh_samp_ancom.R")
# Load packages
library(phyloseq)
# Load data
name = 'NB_A_1.1'
load("C:\\Users\\lucp9827\\Desktop\\Data-ADAM\\NB simulated data\\NB_A_1.1.RData")
### Apply methods to data
res_intermediate=list()
result_aldex = data.frame()
result_corncob= data.frame()
result_ancombc = data.frame()
result_wilcox = data.frame()
result_wilcox_clr = data.frame()
result_marg = data.frame()
result_RI = data.frame()
result_LinDA = data.frame()
result_deseq2 = data.frame()
for (i in (1:100)){
data = signtrans::Trim(sim.data.bulk.p_A[[i]],minPrev = 0.05)
# Apply test
res = apply_methods_stat(data)
res_intermediate[[i]] = res
# Evaluate Test
counts_trim = data.frame(otu_table(data))
# Identify index of I0/I1 OTus
I0_id = which(tax_table(data)[,1] == "FALSE")
I1_id = which(tax_table(data)[,1] == "TRUE")
res_aldex = res_intermediate[[i]][['res_aldex2_w']]
if (!is.null(res_aldex)){
result_aldex[i,c(1:3)] = eval_sums(res_aldex$adjP,I0_id,I1_id)
}
res_corncob = res_intermediate[[i]][['res_corncob']]
if (!is.null(res_corncob)){
result_corncob[i,c(1:3)] =eval_sums(res_corncob$adjP,I0_id,I1_id)
}
res_ancombc = res_intermediate[[i]][['res_ancombc']]
if (!is.null(res_ancombc)){
result_ancombc[i,c(1:3)] =eval_sums(res_ancombc$adjP,I0_id,I1_id)
}
res_wilcox = res_intermediate[[i]][["res_wilcox"]]
if (!is.null(res_wilcox)){
result_wilcox[i,c(1:3)]=eval_sums(res_wilcox$adjP,I0_id,I1_id)
}
res_wilcox_clr = res_intermediate[[i]][["res_wilcox_clr"]]
if (!is.null(res_wilcox_clr)){
result_wilcox_clr[i,c(1:3)]=eval_sums(res_wilcox_clr$adjP,I0_id,I1_id)
}
res_linda= res_intermediate[[i]][["res_linda"]]
if (!is.null(res_linda)){
result_LinDA[i,c(1:3)]=eval_sums(res_linda$adjP,I0_id,I1_id)
}
res_deseq= res_intermediate[[i]][["res_deseq"]]
if (!is.null(res_deseq)){
result_deseq2[i,c(1:3)]=eval_sums(res_deseq$adjP,I0_id,I1_id)
}
# Refrence taxa worden uitgekozen dus evaluatie moet ook aangepast worden!
res_marg = res_intermediate[[i]][["res_marginal"]]
names_I0 = rownames(counts_trim[I0_id,])
names_I1 = rownames(counts_trim[I1_id,])
I0_id_adj =which(rownames(res_marg) %in% names_I0)
I1_id_adj =which(rownames(res_marg) %in% names_I1)
if (!is.null(res_marg)){
result_marg[i,c(1:3)]=eval_sums(res_marg$adjP,I0_id_adj,I1_id_adj)
}
res_RI = res_intermediate[[i]][["res_RI"]]
if (!is.null(res_RI)){
result_RI[i,c(1:3)]=eval_sums(res_RI$adjP,I0_id_adj,I1_id_adj)
}
}
save(res_intermediate, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\inter_",name,".RData"))
Methods = c("Aldex2", "Corncob", "ANCOM-bc", "Wilcoxon", "Wilcoxon_clr","R-sign_marg","R-sign_RI","LinDA","DESeq2")
res_all = data.frame
res_all = rbind(
colMeans(result_aldex,na.rm=TRUE),
colMeans(result_corncob,na.rm=TRUE),
colMeans(result_ancombc,na.rm=TRUE),
colMeans(result_wilcox,na.rm=TRUE),
colMeans(result_wilcox_clr,na.rm=TRUE),
colMeans(result_marg,na.rm=TRUE),
colMeans(result_RI,na.rm=TRUE),
colMeans(result_LinDA,na.rm=TRUE),
colMeans(result_deseq2,na.rm=TRUE)
)
res_all=data.frame(res_all)
res_all$Method = Methods
save(res_all, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\res_",name,".RData"))
res_all_tmp = list()
res_al_tmp = list(
(result_aldex),
(result_corncob),
(result_ancombc),
(result_wilcox),
(result_wilcox_clr),
(result_marg),
(result_RI),
(result_LinDA),
(result_deseq2)
)
names(res_al_tmp) = Methods
save(res_all_tmp, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\res_dataset_",name,".RData"))
source("C:\\Users\\lucp9827\\Desktop\\Code-ADAM\\Functions_clr_tresh_samp_ancom.R")
# Load packages
library(phyloseq)
# Load data
name = 'B_1.3'
load("C:\\Users\\lucp9827\\Desktop\\Data-ADAM\\SPsimSeq simulated data\\simsB_1.3_p.RData")
### Apply methods to data
res_intermediate=list()
result_aldex = data.frame()
result_corncob= data.frame()
result_ancombc = data.frame()
result_wilcox = data.frame()
result_wilcox_clr = data.frame()
result_marg = data.frame()
result_RI = data.frame()
result_LinDA = data.frame()
result_deseq2 = data.frame()
for (i in (1:100)){
data = signtrans::Trim(sim.data.bulk.p_B[[i]],minPrev = 0.05)
# Apply test
res = apply_methods_stat(data)
res_intermediate[[i]] = res
# Evaluate Test
counts_trim = data.frame(otu_table(data))
# Identify index of I0/I1 OTus
I0_id = which(tax_table(data)[,1] == "FALSE")
I1_id = which(tax_table(data)[,1] == "TRUE")
res_aldex = res_intermediate[[i]][['res_aldex2_w']]
if (!is.null(res_aldex)){
result_aldex[i,c(1:3)] = eval_sums(res_aldex$adjP,I0_id,I1_id)
}
res_corncob = res_intermediate[[i]][['res_corncob']]
if (!is.null(res_corncob)){
result_corncob[i,c(1:3)] =eval_sums(res_corncob$adjP,I0_id,I1_id)
}
res_ancombc = res_intermediate[[i]][['res_ancombc']]
if (!is.null(res_ancombc)){
result_ancombc[i,c(1:3)] =eval_sums(res_ancombc$adjP,I0_id,I1_id)
}
res_wilcox = res_intermediate[[i]][["res_wilcox"]]
if (!is.null(res_wilcox)){
result_wilcox[i,c(1:3)]=eval_sums(res_wilcox$adjP,I0_id,I1_id)
}
res_wilcox_clr = res_intermediate[[i]][["res_wilcox_clr"]]
if (!is.null(res_wilcox_clr)){
result_wilcox_clr[i,c(1:3)]=eval_sums(res_wilcox_clr$adjP,I0_id,I1_id)
}
res_linda= res_intermediate[[i]][["res_linda"]]
if (!is.null(res_linda)){
result_LinDA[i,c(1:3)]=eval_sums(res_linda$adjP,I0_id,I1_id)
}
res_deseq= res_intermediate[[i]][["res_deseq"]]
if (!is.null(res_deseq)){
result_deseq2[i,c(1:3)]=eval_sums(res_deseq$adjP,I0_id,I1_id)
}
# Refrence taxa worden uitgekozen dus evaluatie moet ook aangepast worden!
res_marg = res_intermediate[[i]][["res_marginal"]]
names_I0 = rownames(counts_trim[I0_id,])
names_I1 = rownames(counts_trim[I1_id,])
I0_id_adj =which(rownames(res_marg) %in% names_I0)
I1_id_adj =which(rownames(res_marg) %in% names_I1)
if (!is.null(res_marg)){
result_marg[i,c(1:3)]=eval_sums(res_marg$adjP,I0_id_adj,I1_id_adj)
}
res_RI = res_intermediate[[i]][["res_RI"]]
if (!is.null(res_RI)){
result_RI[i,c(1:3)]=eval_sums(res_RI$adjP,I0_id_adj,I1_id_adj)
}
}
save(res_intermediate, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\inter_",name,".RData"))
Methods = c("Aldex2", "Corncob", "ANCOM-bc", "Wilcoxon", "Wilcoxon_clr","R-sign_marg","R-sign_RI","LinDA","DESeq2")
res_all = data.frame
res_all = rbind(
colMeans(result_aldex,na.rm=TRUE),
colMeans(result_corncob,na.rm=TRUE),
colMeans(result_ancombc,na.rm=TRUE),
colMeans(result_wilcox,na.rm=TRUE),
colMeans(result_wilcox_clr,na.rm=TRUE),
colMeans(result_marg,na.rm=TRUE),
colMeans(result_RI,na.rm=TRUE),
colMeans(result_LinDA,na.rm=TRUE),
colMeans(result_deseq2,na.rm=TRUE)
)
res_all=data.frame(res_all)
res_all$Method = Methods
save(res_all, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\res_",name,".RData"))
res_all_tmp = list()
res_al_tmp = list(
(result_aldex),
(result_corncob),
(result_ancombc),
(result_wilcox),
(result_wilcox_clr),
(result_marg),
(result_RI),
(result_LinDA),
(result_deseq2)
)
names(res_al_tmp) = Methods
save(res_all_tmp, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\res_dataset_",name,".RData"))
source("C:\\Users\\lucp9827\\Desktop\\Code-ADAM\\Functions_clr_tresh_samp_ancom.R")
# Load packages
library(phyloseq)
# Load data
name = 'B_1.1'
load("C:\\Users\\lucp9827\\Desktop\\Data-ADAM\\SPsimSeq simulated data\\simsB_1.1_p.RData")
### Apply methods to data
res_intermediate=list()
result_aldex = data.frame()
result_corncob= data.frame()
result_ancombc = data.frame()
result_wilcox = data.frame()
result_wilcox_clr = data.frame()
result_marg = data.frame()
result_RI = data.frame()
result_LinDA = data.frame()
result_deseq2 = data.frame()
for (i in (1:100)){
data = signtrans::Trim(sim.data.bulk.p_B[[i]],minPrev = 0.05)
# Apply test
res = apply_methods_stat(data)
res_intermediate[[i]] = res
# Evaluate Test
counts_trim = data.frame(otu_table(data))
# Identify index of I0/I1 OTus
I0_id = which(tax_table(data)[,1] == "FALSE")
I1_id = which(tax_table(data)[,1] == "TRUE")
res_aldex = res_intermediate[[i]][['res_aldex2_w']]
if (!is.null(res_aldex)){
result_aldex[i,c(1:3)] = eval_sums(res_aldex$adjP,I0_id,I1_id)
}
res_corncob = res_intermediate[[i]][['res_corncob']]
if (!is.null(res_corncob)){
result_corncob[i,c(1:3)] =eval_sums(res_corncob$adjP,I0_id,I1_id)
}
res_ancombc = res_intermediate[[i]][['res_ancombc']]
if (!is.null(res_ancombc)){
result_ancombc[i,c(1:3)] =eval_sums(res_ancombc$adjP,I0_id,I1_id)
}
res_wilcox = res_intermediate[[i]][["res_wilcox"]]
if (!is.null(res_wilcox)){
result_wilcox[i,c(1:3)]=eval_sums(res_wilcox$adjP,I0_id,I1_id)
}
res_wilcox_clr = res_intermediate[[i]][["res_wilcox_clr"]]
if (!is.null(res_wilcox_clr)){
result_wilcox_clr[i,c(1:3)]=eval_sums(res_wilcox_clr$adjP,I0_id,I1_id)
}
res_linda= res_intermediate[[i]][["res_linda"]]
if (!is.null(res_linda)){
result_LinDA[i,c(1:3)]=eval_sums(res_linda$adjP,I0_id,I1_id)
}
res_deseq= res_intermediate[[i]][["res_deseq"]]
if (!is.null(res_deseq)){
result_deseq2[i,c(1:3)]=eval_sums(res_deseq$adjP,I0_id,I1_id)
}
# Refrence taxa worden uitgekozen dus evaluatie moet ook aangepast worden!
res_marg = res_intermediate[[i]][["res_marginal"]]
names_I0 = rownames(counts_trim[I0_id,])
names_I1 = rownames(counts_trim[I1_id,])
I0_id_adj =which(rownames(res_marg) %in% names_I0)
I1_id_adj =which(rownames(res_marg) %in% names_I1)
if (!is.null(res_marg)){
result_marg[i,c(1:3)]=eval_sums(res_marg$adjP,I0_id_adj,I1_id_adj)
}
res_RI = res_intermediate[[i]][["res_RI"]]
if (!is.null(res_RI)){
result_RI[i,c(1:3)]=eval_sums(res_RI$adjP,I0_id_adj,I1_id_adj)
}
}
save(res_intermediate, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\inter_",name,".RData"))
Methods = c("Aldex2", "Corncob", "ANCOM-bc", "Wilcoxon", "Wilcoxon_clr","R-sign_marg","R-sign_RI","LinDA","DESeq2")
res_all = data.frame
res_all = rbind(
colMeans(result_aldex,na.rm=TRUE),
colMeans(result_corncob,na.rm=TRUE),
colMeans(result_ancombc,na.rm=TRUE),
colMeans(result_wilcox,na.rm=TRUE),
colMeans(result_wilcox_clr,na.rm=TRUE),
colMeans(result_marg,na.rm=TRUE),
colMeans(result_RI,na.rm=TRUE),
colMeans(result_LinDA,na.rm=TRUE),
colMeans(result_deseq2,na.rm=TRUE)
)
res_all=data.frame(res_all)
res_all$Method = Methods
save(res_all, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\res_",name,".RData"))
res_all_tmp = list()
res_al_tmp = list(
(result_aldex),
(result_corncob),
(result_ancombc),
(result_wilcox),
(result_wilcox_clr),
(result_marg),
(result_RI),
(result_LinDA),
(result_deseq2)
)
names(res_al_tmp) = Methods
save(res_all_tmp, file=paste0("C:\\Users\\lucp9827\\Desktop\\Results-ADAM\\Individual\\res_dataset_",name,".RData"))
load("G:/My Drive/Adaptive test/Leyla/Results-ADAM/Individual/NB_res.RData")
View(res_comp)
View(res_comp)
load("G:/My Drive/Adaptive test/Leyla/Results-ADAM/Individual/SP_res.RData")
setwd(C:\Users\lucp9827\Desktop\ADAM)
setwd("C:\\Users\\lucp9827\\Desktop\\ADAM")
7904.76+1634.92+2000+9000+1269.84
21809.52-15000
6809.52-3000
7904.76+1634.92+2000+9000
20539.68-15000
5539.68 - 3000
634.92+634.92+634.92
1904.76+634.92
600*20
634.92*3
1300+5733+1200+800
1300+573+1200+800
4000
200*30
600*0.21
600*21%
6000*0.21
10.23+10.23+15.92+0.72+10.15+10.15+10.2+10.2+10.37+10.37+5.27+186+86+86
7348.24-487.92
6842.95+487.92
7330.87+17.36
7348.24-6860.31
